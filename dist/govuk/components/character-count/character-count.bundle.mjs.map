{"version":3,"file":"character-count.bundle.mjs","sources":["../../../../src/govuk/common/closest-attribute-value.mjs","../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/character-count/character-count.mjs"],"sourcesContent":["/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @private\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue ($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n *\n * @module common/index\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @private\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs (/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @private\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace (configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error('Provide a `namespace` of type \"string\" to filter the `configObject` by.')\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (Object.prototype.hasOwnProperty.call(configObject, key) && keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @private\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString (value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @private\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset (dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @private\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor (translations, config) {\n    // Make list of translations available throughout function\n    this.translations = translations || {}\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = (config && config.locale) || document.documentElement.lang || 'en'\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t (lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (options && typeof options.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(lookupKey, options.count)}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error('i18n: cannot replace placeholders in string if no option data provided')\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      } else {\n        return translationString\n      }\n    } else {\n      // If the key wasn't found in our translations object,\n      // return the lookup key itself as the fallback\n      return lookupKey\n    }\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders (translationString, options) {\n    /** @type {Intl.NumberFormat | undefined} */\n    let formatter\n\n    if (this.hasIntlNumberFormatSupport()) {\n      formatter = new Intl.NumberFormat(this.locale)\n    }\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (placeholderValue === false || (\n            typeof placeholderValue !== 'number' &&\n            typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter ? formatter.format(placeholderValue) : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        } else {\n          throw new Error(`i18n: no data found to replace ${placeholderWithBraces} placeholder in string`)\n        }\n      })\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.PluralRules.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports PluralRules (NOT true in IE11)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport () {\n    return Boolean(window.Intl && ('PluralRules' in window.Intl && Intl.PluralRules.supportedLocalesOf(this.locale).length))\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.NumberFormat.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports NumberFormat (also true in IE11)\n   * - The browser/OS has number formatting rules for the current locale (browser dependent)\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlNumberFormatSupport () {\n    return Boolean(window.Intl && ('NumberFormat' in window.Intl && Intl.NumberFormat.supportedLocalesOf(this.locale).length))\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix (lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) { return 'other' }\n\n    let preferredForm\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    if (this.hasIntlPluralRulesSupport()) {\n      preferredForm = new Intl.PluralRules(this.locale).select(count)\n    } else {\n      preferredForm = this.selectPluralFormUsingFallbackRules(count)\n    }\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      if (console && 'warn' in console) {\n        console.warn(`i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`)\n      }\n\n      return 'other'\n      // If the required `other` plural form is missing, all we can do is error\n    } else {\n      throw new Error(\n        `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n      )\n    }\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules (count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale () {\n    const locale = this.locale\n    const localeShort = locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      if (Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)) {\n        const languages = I18n.pluralRulesMap[pluralRule]\n        for (let i = 0; i < languages.length; i++) {\n          if (languages[i] === locale || languages[i] === localeShort) {\n            return pluralRule\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af', 'sq', 'az', 'eu', 'bg', 'ca', 'da', 'nl', 'en', 'et', 'fi', 'ka',\n      'de', 'el', 'hu', 'lb', 'no', 'so', 'sw', 'sv', 'ta', 'te', 'tr', 'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    /* eslint-disable jsdoc/require-jsdoc */\n    arabic (n) {\n      if (n === 0) { return 'zero' }\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n % 100 >= 3 && n % 100 <= 10) { return 'few' }\n      if (n % 100 >= 11 && n % 100 <= 99) { return 'many' }\n      return 'other'\n    },\n    chinese () {\n      return 'other'\n    },\n    french (n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german (n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish (n) {\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n >= 3 && n <= 6) { return 'few' }\n      if (n >= 7 && n <= 10) { return 'many' }\n      return 'other'\n    },\n    russian (n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) { return 'one' }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) { return 'few' }\n      if (last === 0 || (last >= 5 && last <= 9) || (lastTwo >= 11 && lastTwo <= 14)) { return 'many' }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish (n) {\n      if (n === 1 || n === 11) { return 'one' }\n      if (n === 2 || n === 12) { return 'two' }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) { return 'few' }\n      return 'other'\n    },\n    spanish (n) {\n      if (n === 1) { return 'one' }\n      if (n % 1000000 === 0 && n !== 0) { return 'many' }\n      return 'other'\n    },\n    welsh (n) {\n      if (n === 0) { return 'zero' }\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n === 3) { return 'few' }\n      if (n === 6) { return 'many' }\n      return 'other'\n    }\n    /* eslint-enable jsdoc/require-jsdoc */\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { extractConfigByNamespace, mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n */\nexport class CharacterCount {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $visibleCountMessage = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $screenReaderCountMessage = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength = Infinity\n\n  /**\n   * @param {Element} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      return this\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change the\n    // type of count, we need to reset the `maxlength` and `maxwords` from the\n    // JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config || {},\n      configOverrides,\n      datasetConfig\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    if ('maxwords' in this.config && this.config.maxwords) {\n      this.maxLength = this.config.maxwords\n    } else if ('maxlength' in this.config && this.config.maxlength) {\n      this.maxLength = this.config.maxlength\n    } else {\n      return this\n    }\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const $textareaDescription = document.getElementById(`${this.$textarea.id}-info`)\n    if (!$textareaDescription) {\n      return\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if ($textareaDescription.innerText.match(/^\\s*$/)) {\n      $textareaDescription.innerText = this.i18n.t('textareaDescription', { count: this.maxLength })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className = 'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $screenReaderCountMessage)\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents () {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp () {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n   * the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus () {\n    this.valueChecker = window.setInterval(() => {\n      if (!this.lastInputTimestamp || (Date.now() - 500) >= this.lastInputTimestamp) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur () {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged () {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage () {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage () {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      this.$visibleCountMessage.classList.remove('govuk-character-count__message--disabled')\n    } else {\n      this.$visibleCountMessage.classList.add('govuk-character-count__message--disabled')\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      this.$textarea.classList.add('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-hint')\n      this.$visibleCountMessage.classList.add('govuk-error-message')\n    } else {\n      this.$textarea.classList.remove('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-error-message')\n      this.$visibleCountMessage.classList.add('govuk-hint')\n    }\n\n    // Update message\n    this.$visibleCountMessage.innerText = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage () {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.innerText = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count (text) {\n    if ('maxwords' in this.config && this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    } else {\n      return text.length\n    }\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage () {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    const countType = 'maxwords' in this.config && this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage (remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix = remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, { count: Math.abs(remainingNumber) })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold () {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = maxLength * this.config.threshold / 100\n\n    return (thresholdValue <= currentLength)\n  }\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @default\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {CharacterCountConfigWithMaxLength | CharacterCountConfigWithMaxWords} CharacterCountConfig\n */\n\n/**\n * Character count config (with maximum number of characters)\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfigWithMaxLength\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count config (with maximum number of words)\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfigWithMaxWords\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n"],"names":["closestAttributeValue","$element","attributeName","$closestElementWithAttribute","closest","getAttribute","mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","extractConfigByNamespace","namespace","Error","newObject","keyParts","split","shift","newKey","join","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","I18n","constructor","translations","config","locale","document","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","CharacterCount","$module","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","i18n","maxLength","Infinity","HTMLElement","body","classList","contains","querySelector","HTMLTextAreaElement","HTMLInputElement","datasetConfig","configOverrides","maxlength","undefined","maxwords","defaults","$textareaDescription","getElementById","id","innerText","insertAdjacentElement","createElement","className","setAttribute","add","removeAttribute","bindChangeEvents","addEventListener","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","remove","getCountMessage","text","tokens","countType","formatCountMessage","translationKeySuffix","threshold","currentLength","thresholdValue","freeze","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription"],"mappings":"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CAAA,EAAEsG,SAAU,CAAA,OAAA,CAAQ,CAAC,CAAA;AAC3C,KAAA;IAEA,MAAME,oBAAoB,GAAGR,eAAe,GAAG,CAAC,GAAG,WAAW,GAAG,YAAY,CAAA;IAE7E,OAAO,IAAI,CAACvC,IAAI,CAACzD,CAAC,CAAE,CAAA,EAAEsG,SAAU,CAAA,EAAEE,oBAAqB,CAAA,CAAC,EAAE;AAAErG,MAAAA,KAAK,EAAEwB,IAAI,CAACC,GAAG,CAACoE,eAAe,CAAA;AAAE,KAAC,CAAC,CAAA;AACjG,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAeA,GAAI;AACjB;AACA,IAAA,IAAI,CAAC,IAAI,CAACtG,MAAM,CAAC8G,SAAS,EAAE;AAC1B,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;IACA,MAAMC,aAAa,GAAG,IAAI,CAACvG,KAAK,CAAC,IAAI,CAACgD,SAAS,CAAClF,KAAK,CAAC,CAAA;AACtD,IAAA,MAAMyF,SAAS,GAAG,IAAI,CAACA,SAAS,CAAA;IAEhC,MAAMiD,cAAc,GAAGjD,SAAS,GAAG,IAAI,CAAC/D,MAAM,CAAC8G,SAAS,GAAG,GAAG,CAAA;IAE9D,OAAQE,cAAc,IAAID,aAAa,CAAA;AACzC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AA6BA,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA7eazD,cAAc,CA6XlBuB,QAAQ,GAAG3G,MAAM,CAAC+I,MAAM,CAAC;AAC9BH,EAAAA,SAAS,EAAE,CAAC;AACZhD,EAAAA,IAAI,EAAE;AACJ;AACAoD,IAAAA,oBAAoB,EAAE;AACpBC,MAAAA,GAAG,EAAE,uCAAuC;AAC5CC,MAAAA,KAAK,EAAE,wCAAA;KACR;AACDC,IAAAA,iBAAiB,EAAE,iCAAiC;AACpDC,IAAAA,mBAAmB,EAAE;AACnBH,MAAAA,GAAG,EAAE,sCAAsC;AAC3CC,MAAAA,KAAK,EAAE,uCAAA;KACR;AACD;AACAG,IAAAA,eAAe,EAAE;AACfJ,MAAAA,GAAG,EAAE,kCAAkC;AACvCC,MAAAA,KAAK,EAAE,mCAAA;KACR;AACDI,IAAAA,YAAY,EAAE,4BAA4B;AAC1CC,IAAAA,cAAc,EAAE;AACdN,MAAAA,GAAG,EAAE,iCAAiC;AACtCC,MAAAA,KAAK,EAAE,kCAAA;KACR;AACDM,IAAAA,mBAAmB,EAAE;AACnBN,MAAAA,KAAK,EAAE,EAAA;AACT,KAAA;AACF,GAAA;AACF,CAAC,CAAC;;;;"}