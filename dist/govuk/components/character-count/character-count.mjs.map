{"version":3,"file":"character-count.mjs","sources":["../../../../src/govuk/components/character-count/character-count.mjs"],"sourcesContent":["import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { extractConfigByNamespace, mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n */\nexport class CharacterCount {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $visibleCountMessage = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $screenReaderCountMessage = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength = Infinity\n\n  /**\n   * @param {Element} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      return this\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change the\n    // type of count, we need to reset the `maxlength` and `maxwords` from the\n    // JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config || {},\n      configOverrides,\n      datasetConfig\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    if ('maxwords' in this.config && this.config.maxwords) {\n      this.maxLength = this.config.maxwords\n    } else if ('maxlength' in this.config && this.config.maxlength) {\n      this.maxLength = this.config.maxlength\n    } else {\n      return this\n    }\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const $textareaDescription = document.getElementById(`${this.$textarea.id}-info`)\n    if (!$textareaDescription) {\n      return\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if ($textareaDescription.innerText.match(/^\\s*$/)) {\n      $textareaDescription.innerText = this.i18n.t('textareaDescription', { count: this.maxLength })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className = 'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $screenReaderCountMessage)\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents () {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp () {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n   * the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus () {\n    this.valueChecker = window.setInterval(() => {\n      if (!this.lastInputTimestamp || (Date.now() - 500) >= this.lastInputTimestamp) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur () {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged () {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage () {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage () {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      this.$visibleCountMessage.classList.remove('govuk-character-count__message--disabled')\n    } else {\n      this.$visibleCountMessage.classList.add('govuk-character-count__message--disabled')\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      this.$textarea.classList.add('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-hint')\n      this.$visibleCountMessage.classList.add('govuk-error-message')\n    } else {\n      this.$textarea.classList.remove('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-error-message')\n      this.$visibleCountMessage.classList.add('govuk-hint')\n    }\n\n    // Update message\n    this.$visibleCountMessage.innerText = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage () {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.innerText = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count (text) {\n    if ('maxwords' in this.config && this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    } else {\n      return text.length\n    }\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage () {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    const countType = 'maxwords' in this.config && this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage (remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix = remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, { count: Math.abs(remainingNumber) })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold () {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = maxLength * this.config.threshold / 100\n\n    return (thresholdValue <= currentLength)\n  }\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @default\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {CharacterCountConfigWithMaxLength | CharacterCountConfigWithMaxWords} CharacterCountConfig\n */\n\n/**\n * Character count config (with maximum number of characters)\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfigWithMaxLength\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count config (with maximum number of words)\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfigWithMaxWords\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n"],"names":["CharacterCount","constructor","$module","config","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","i18n","maxLength","Infinity","HTMLElement","document","body","classList","contains","querySelector","HTMLTextAreaElement","HTMLInputElement","datasetConfig","normaliseDataset","dataset","configOverrides","maxlength","undefined","maxwords","mergeConfigs","defaults","I18n","extractConfigByNamespace","locale","closestAttributeValue","$textareaDescription","getElementById","id","innerText","match","t","count","insertAdjacentElement","createElement","className","setAttribute","add","removeAttribute","bindChangeEvents","window","addEventListener","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","value","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","remove","getCountMessage","text","tokens","length","countType","formatCountMessage","translationKeySuffix","Math","abs","threshold","currentLength","thresholdValue","Object","freeze","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,cAAc,CAAC;AA8C1B;AACF;AACA;AACA;AACEC,EAAAA,WAAWA,CAAEC,OAAO,EAAEC,MAAM,EAAE;AAjD9B;AAAA,IAAA,IAAA,CACAD,OAAO,GAAA,KAAA,CAAA,CAAA;AAEP;AAAA,IAAA,IAAA,CACAE,SAAS,GAAA,KAAA,CAAA,CAAA;AAET;AACF;AACA;AACA;IAHE,IAIAC,CAAAA,oBAAoB,GAAG,IAAI,CAAA;AAE3B;AACF;AACA;AACA;IAHE,IAIAC,CAAAA,yBAAyB,GAAG,IAAI,CAAA;AAEhC;AACF;AACA;AACA;IAHE,IAIAC,CAAAA,kBAAkB,GAAG,IAAI,CAAA;AAEzB;IAAA,IACAC,CAAAA,cAAc,GAAG,EAAE,CAAA;AAEnB;AACF;AACA;AACA;IAHE,IAIAC,CAAAA,YAAY,GAAG,IAAI,CAAA;AAEnB;AACF;AACA;AACA;AAHE,IAAA,IAAA,CAIAN,MAAM,GAAA,KAAA,CAAA,CAAA;AAEN;AAAA,IAAA,IAAA,CACAO,IAAI,GAAA,KAAA,CAAA,CAAA;AAEJ;IAAA,IACAC,CAAAA,SAAS,GAAGC,QAAQ,CAAA;AAOlB,IAAA,IAAI,EAAEV,OAAO,YAAYW,WAAW,CAAC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,0BAA0B,CAAC,EAAE;AACtG,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AAEA,IAAA,MAAMb,SAAS,GAAGF,OAAO,CAACgB,aAAa,CAAC,2BAA2B,CAAC,CAAA;IACpE,IACE,EACEd,SAAS,YAAYe,mBAAmB,IACxCf,SAAS,YAAYgB,gBAAgB,CACtC,EACD;AACA,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;AACA,IAAA,MAAMC,aAAa,GAAGC,gBAAgB,CAACpB,OAAO,CAACqB,OAAO,CAAC,CAAA;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAIC,eAAe,GAAG,EAAE,CAAA;AACxB,IAAA,IAAI,UAAU,IAAIH,aAAa,IAAI,WAAW,IAAIA,aAAa,EAAE;AAC/DG,MAAAA,eAAe,GAAG;AAChBC,QAAAA,SAAS,EAAEC,SAAS;AACpBC,QAAAA,QAAQ,EAAED,SAAAA;OACX,CAAA;AACH,KAAA;AAEA,IAAA,IAAI,CAACvB,MAAM,GAAGyB,YAAY,CACxB5B,cAAc,CAAC6B,QAAQ,EACvB1B,MAAM,IAAI,EAAE,EACZqB,eAAe,EACfH,aACF,CAAC,CAAA;AAED,IAAA,IAAI,CAACX,IAAI,GAAG,IAAIoB,IAAI,CAACC,wBAAwB,CAAC,IAAI,CAAC5B,MAAM,EAAE,MAAM,CAAC,EAAE;AAClE;AACA6B,MAAAA,MAAM,EAAEC,qBAAqB,CAAC/B,OAAO,EAAE,MAAM,CAAA;AAC/C,KAAC,CAAC,CAAA;;AAEF;IACA,IAAI,UAAU,IAAI,IAAI,CAACC,MAAM,IAAI,IAAI,CAACA,MAAM,CAACwB,QAAQ,EAAE;AACrD,MAAA,IAAI,CAAChB,SAAS,GAAG,IAAI,CAACR,MAAM,CAACwB,QAAQ,CAAA;AACvC,KAAC,MAAM,IAAI,WAAW,IAAI,IAAI,CAACxB,MAAM,IAAI,IAAI,CAACA,MAAM,CAACsB,SAAS,EAAE;AAC9D,MAAA,IAAI,CAACd,SAAS,GAAG,IAAI,CAACR,MAAM,CAACsB,SAAS,CAAA;AACxC,KAAC,MAAM;AACL,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;IAEA,IAAI,CAACvB,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAI,CAACE,SAAS,GAAGA,SAAS,CAAA;AAE1B,IAAA,MAAM8B,oBAAoB,GAAGpB,QAAQ,CAACqB,cAAc,CAAE,CAAE,EAAA,IAAI,CAAC/B,SAAS,CAACgC,EAAG,OAAM,CAAC,CAAA;IACjF,IAAI,CAACF,oBAAoB,EAAE;AACzB,MAAA,OAAA;AACF,KAAA;;AAEA;AACA;AACA;IACA,IAAIA,oBAAoB,CAACG,SAAS,CAACC,KAAK,CAAC,OAAO,CAAC,EAAE;MACjDJ,oBAAoB,CAACG,SAAS,GAAG,IAAI,CAAC3B,IAAI,CAAC6B,CAAC,CAAC,qBAAqB,EAAE;QAAEC,KAAK,EAAE,IAAI,CAAC7B,SAAAA;AAAU,OAAC,CAAC,CAAA;AAChG,KAAA;;AAEA;AACA;IACA,IAAI,CAACP,SAAS,CAACqC,qBAAqB,CAAC,UAAU,EAAEP,oBAAoB,CAAC,CAAA;;AAEtE;AACA;AACA,IAAA,MAAM5B,yBAAyB,GAAGQ,QAAQ,CAAC4B,aAAa,CAAC,KAAK,CAAC,CAAA;IAC/DpC,yBAAyB,CAACqC,SAAS,GAAG,wDAAwD,CAAA;AAC9FrC,IAAAA,yBAAyB,CAACsC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;IAC7D,IAAI,CAACtC,yBAAyB,GAAGA,yBAAyB,CAAA;AAC1D4B,IAAAA,oBAAoB,CAACO,qBAAqB,CAAC,UAAU,EAAEnC,yBAAyB,CAAC,CAAA;;AAEjF;AACA;AACA;AACA,IAAA,MAAMD,oBAAoB,GAAGS,QAAQ,CAAC4B,aAAa,CAAC,KAAK,CAAC,CAAA;AAC1DrC,IAAAA,oBAAoB,CAACsC,SAAS,GAAGT,oBAAoB,CAACS,SAAS,CAAA;AAC/DtC,IAAAA,oBAAoB,CAACW,SAAS,CAAC6B,GAAG,CAAC,+BAA+B,CAAC,CAAA;AACnExC,IAAAA,oBAAoB,CAACuC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;IACxD,IAAI,CAACvC,oBAAoB,GAAGA,oBAAoB,CAAA;AAChD6B,IAAAA,oBAAoB,CAACO,qBAAqB,CAAC,UAAU,EAAEpC,oBAAoB,CAAC,CAAA;;AAE5E;AACA6B,IAAAA,oBAAoB,CAAClB,SAAS,CAAC6B,GAAG,CAAC,uBAAuB,CAAC,CAAA;;AAE3D;AACA,IAAA,IAAI,CAACzC,SAAS,CAAC0C,eAAe,CAAC,WAAW,CAAC,CAAA;IAE3C,IAAI,CAACC,gBAAgB,EAAE,CAAA;;AAEvB;AACA;AACA;IACAC,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAE,MAAM,IAAI,CAACC,kBAAkB,EAAE,CAAC,CAAA;;AAEpE;AACA;AACA;IACA,IAAI,CAACA,kBAAkB,EAAE,CAAA;AAC3B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEH,EAAAA,gBAAgBA,GAAI;AAClB,IAAA,IAAI,CAAC3C,SAAS,CAAC6C,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACE,WAAW,EAAE,CAAC,CAAA;;AAElE;AACA,IAAA,IAAI,CAAC/C,SAAS,CAAC6C,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACG,WAAW,EAAE,CAAC,CAAA;AAClE,IAAA,IAAI,CAAChD,SAAS,CAAC6C,gBAAgB,CAAC,MAAM,EAAE,MAAM,IAAI,CAACI,UAAU,EAAE,CAAC,CAAA;AAClE,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEF,EAAAA,WAAWA,GAAI;IACb,IAAI,CAACG,yBAAyB,EAAE,CAAA;AAChC,IAAA,IAAI,CAAC/C,kBAAkB,GAAGgD,IAAI,CAACC,GAAG,EAAE,CAAA;AACtC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEJ,EAAAA,WAAWA,GAAI;AACb,IAAA,IAAI,CAAC3C,YAAY,GAAGuC,MAAM,CAACS,WAAW,CAAC,MAAM;AAC3C,MAAA,IAAI,CAAC,IAAI,CAAClD,kBAAkB,IAAKgD,IAAI,CAACC,GAAG,EAAE,GAAG,GAAG,IAAK,IAAI,CAACjD,kBAAkB,EAAE;QAC7E,IAAI,CAACmD,oBAAoB,EAAE,CAAA;AAC7B,OAAA;KACD,EAAE,IAAI,CAAC,CAAA;AACV,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEL,EAAAA,UAAUA,GAAI;AACZ;AACAM,IAAAA,aAAa,CAAC,IAAI,CAAClD,YAAY,CAAC,CAAA;AAClC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEiD,EAAAA,oBAAoBA,GAAI;IACtB,IAAI,IAAI,CAACtD,SAAS,CAACwD,KAAK,KAAK,IAAI,CAACpD,cAAc,EAAE;AAChD,MAAA,IAAI,CAACA,cAAc,GAAG,IAAI,CAACJ,SAAS,CAACwD,KAAK,CAAA;MAC1C,IAAI,CAACV,kBAAkB,EAAE,CAAA;AAC3B,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEA,EAAAA,kBAAkBA,GAAI;IACpB,IAAI,CAACI,yBAAyB,EAAE,CAAA;IAChC,IAAI,CAACO,8BAA8B,EAAE,CAAA;AACvC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEP,EAAAA,yBAAyBA,GAAI;AAC3B,IAAA,MAAMQ,eAAe,GAAG,IAAI,CAACnD,SAAS,GAAG,IAAI,CAAC6B,KAAK,CAAC,IAAI,CAACpC,SAAS,CAACwD,KAAK,CAAC,CAAA;;AAEzE;AACA;AACA,IAAA,IAAI,IAAI,CAACG,eAAe,EAAE,EAAE;MAC1B,IAAI,CAAC1D,oBAAoB,CAACW,SAAS,CAACgD,MAAM,CAAC,0CAA0C,CAAC,CAAA;AACxF,KAAC,MAAM;MACL,IAAI,CAAC3D,oBAAoB,CAACW,SAAS,CAAC6B,GAAG,CAAC,0CAA0C,CAAC,CAAA;AACrF,KAAA;;AAEA;IACA,IAAIiB,eAAe,GAAG,CAAC,EAAE;MACvB,IAAI,CAAC1D,SAAS,CAACY,SAAS,CAAC6B,GAAG,CAAC,uBAAuB,CAAC,CAAA;MACrD,IAAI,CAACxC,oBAAoB,CAACW,SAAS,CAACgD,MAAM,CAAC,YAAY,CAAC,CAAA;MACxD,IAAI,CAAC3D,oBAAoB,CAACW,SAAS,CAAC6B,GAAG,CAAC,qBAAqB,CAAC,CAAA;AAChE,KAAC,MAAM;MACL,IAAI,CAACzC,SAAS,CAACY,SAAS,CAACgD,MAAM,CAAC,uBAAuB,CAAC,CAAA;MACxD,IAAI,CAAC3D,oBAAoB,CAACW,SAAS,CAACgD,MAAM,CAAC,qBAAqB,CAAC,CAAA;MACjE,IAAI,CAAC3D,oBAAoB,CAACW,SAAS,CAAC6B,GAAG,CAAC,YAAY,CAAC,CAAA;AACvD,KAAA;;AAEA;IACA,IAAI,CAACxC,oBAAoB,CAACgC,SAAS,GAAG,IAAI,CAAC4B,eAAe,EAAE,CAAA;AAC9D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACEJ,EAAAA,8BAA8BA,GAAI;AAChC;AACA;AACA,IAAA,IAAI,IAAI,CAACE,eAAe,EAAE,EAAE;AAC1B,MAAA,IAAI,CAACzD,yBAAyB,CAACwC,eAAe,CAAC,aAAa,CAAC,CAAA;AAC/D,KAAC,MAAM;MACL,IAAI,CAACxC,yBAAyB,CAACsC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;AACpE,KAAA;;AAEA;IACA,IAAI,CAACtC,yBAAyB,CAAC+B,SAAS,GAAG,IAAI,CAAC4B,eAAe,EAAE,CAAA;AACnE,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEzB,KAAKA,CAAE0B,IAAI,EAAE;IACX,IAAI,UAAU,IAAI,IAAI,CAAC/D,MAAM,IAAI,IAAI,CAACA,MAAM,CAACwB,QAAQ,EAAE;MACrD,MAAMwC,MAAM,GAAGD,IAAI,CAAC5B,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;MACxC,OAAO6B,MAAM,CAACC,MAAM,CAAA;AACtB,KAAC,MAAM;MACL,OAAOF,IAAI,CAACE,MAAM,CAAA;AACpB,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEH,EAAAA,eAAeA,GAAI;AACjB,IAAA,MAAMH,eAAe,GAAG,IAAI,CAACnD,SAAS,GAAG,IAAI,CAAC6B,KAAK,CAAC,IAAI,CAACpC,SAAS,CAACwD,KAAK,CAAC,CAAA;AAEzE,IAAA,MAAMS,SAAS,GAAG,UAAU,IAAI,IAAI,CAAClE,MAAM,IAAI,IAAI,CAACA,MAAM,CAACwB,QAAQ,GAAG,OAAO,GAAG,YAAY,CAAA;AAC5F,IAAA,OAAO,IAAI,CAAC2C,kBAAkB,CAACR,eAAe,EAAEO,SAAS,CAAC,CAAA;AAC5D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,kBAAkBA,CAAER,eAAe,EAAEO,SAAS,EAAE;IAC9C,IAAIP,eAAe,KAAK,CAAC,EAAE;MACzB,OAAO,IAAI,CAACpD,IAAI,CAAC6B,CAAC,CAAE,CAAA,EAAE8B,SAAU,CAAA,OAAA,CAAQ,CAAC,CAAA;AAC3C,KAAA;IAEA,MAAME,oBAAoB,GAAGT,eAAe,GAAG,CAAC,GAAG,WAAW,GAAG,YAAY,CAAA;IAE7E,OAAO,IAAI,CAACpD,IAAI,CAAC6B,CAAC,CAAE,CAAA,EAAE8B,SAAU,CAAA,EAAEE,oBAAqB,CAAA,CAAC,EAAE;AAAE/B,MAAAA,KAAK,EAAEgC,IAAI,CAACC,GAAG,CAACX,eAAe,CAAA;AAAE,KAAC,CAAC,CAAA;AACjG,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAeA,GAAI;AACjB;AACA,IAAA,IAAI,CAAC,IAAI,CAAC5D,MAAM,CAACuE,SAAS,EAAE;AAC1B,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;;AAEA;IACA,MAAMC,aAAa,GAAG,IAAI,CAACnC,KAAK,CAAC,IAAI,CAACpC,SAAS,CAACwD,KAAK,CAAC,CAAA;AACtD,IAAA,MAAMjD,SAAS,GAAG,IAAI,CAACA,SAAS,CAAA;IAEhC,MAAMiE,cAAc,GAAGjE,SAAS,GAAG,IAAI,CAACR,MAAM,CAACuE,SAAS,GAAG,GAAG,CAAA;IAE9D,OAAQE,cAAc,IAAID,aAAa,CAAA;AACzC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AA6BA,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA7ea3E,cAAc,CA6XlB6B,QAAQ,GAAGgD,MAAM,CAACC,MAAM,CAAC;AAC9BJ,EAAAA,SAAS,EAAE,CAAC;AACZhE,EAAAA,IAAI,EAAE;AACJ;AACAqE,IAAAA,oBAAoB,EAAE;AACpBC,MAAAA,GAAG,EAAE,uCAAuC;AAC5CC,MAAAA,KAAK,EAAE,wCAAA;KACR;AACDC,IAAAA,iBAAiB,EAAE,iCAAiC;AACpDC,IAAAA,mBAAmB,EAAE;AACnBH,MAAAA,GAAG,EAAE,sCAAsC;AAC3CC,MAAAA,KAAK,EAAE,uCAAA;KACR;AACD;AACAG,IAAAA,eAAe,EAAE;AACfJ,MAAAA,GAAG,EAAE,kCAAkC;AACvCC,MAAAA,KAAK,EAAE,mCAAA;KACR;AACDI,IAAAA,YAAY,EAAE,4BAA4B;AAC1CC,IAAAA,cAAc,EAAE;AACdN,MAAAA,GAAG,EAAE,iCAAiC;AACtCC,MAAAA,KAAK,EAAE,kCAAA;KACR;AACDM,IAAAA,mBAAmB,EAAE;AACnBN,MAAAA,KAAK,EAAE,EAAA;AACT,KAAA;AACF,GAAA;AACF,CAAC,CAAC;;;;"}