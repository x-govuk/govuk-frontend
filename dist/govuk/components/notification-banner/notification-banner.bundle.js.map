{"version":3,"file":"notification-banner.bundle.js","sources":["../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/components/notification-banner/notification-banner.mjs"],"sourcesContent":["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n *\n * @module common/index\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @private\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs (/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @private\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace (configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error('Provide a `namespace` of type \"string\" to filter the `configObject` by.')\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (Object.prototype.hasOwnProperty.call(configObject, key) && keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @private\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString (value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @private\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset (dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\n\n/**\n * Notification Banner component\n */\nexport class NotificationBanner {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.setFocus()\n  }\n\n  /**\n   * Focus the element\n   *\n   * If `role=\"alert\"` is set, focus the element to help some assistive technologies\n   * prioritise announcing it.\n   *\n   * You can turn off the auto-focus functionality by setting `data-disable-auto-focus=\"true\"` in the\n   * component HTML. You might wish to do this based on user research findings, or to avoid a clash\n   * with another element which should be focused when the page loads.\n   *\n   * @private\n   */\n  setFocus () {\n    if (this.config.disableAutoFocus) {\n      return\n    }\n\n    if (this.$module.getAttribute('role') !== 'alert') {\n      return\n    }\n\n    // Set tabindex to -1 to make the element focusable with JavaScript.\n    // Remove the tabindex on blur as the component doesn't need to be focusable after the page has\n    // loaded.\n    if (!this.$module.getAttribute('tabindex')) {\n      this.$module.setAttribute('tabindex', '-1')\n\n      this.$module.addEventListener('blur', () => {\n        this.$module.removeAttribute('tabindex')\n      })\n    }\n\n    this.$module.focus()\n  }\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @default\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n"],"names":["mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","NotificationBanner","constructor","$module","config","HTMLElement","document","body","classList","contains","defaults","setFocus","disableAutoFocus","getAttribute","setAttribute","addEventListener","removeAttribute","focus","freeze"],"mappings":"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"}