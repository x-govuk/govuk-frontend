{"version":3,"file":"exit-this-page.bundle.mjs","sources":["../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/exit-this-page/exit-this-page.mjs"],"sourcesContent":["/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n *\n * @module common/index\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @private\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs (/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @private\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace (configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error('Provide a `namespace` of type \"string\" to filter the `configObject` by.')\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (Object.prototype.hasOwnProperty.call(configObject, key) && keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @private\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString (value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @private\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset (dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @private\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor (translations, config) {\n    // Make list of translations available throughout function\n    this.translations = translations || {}\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = (config && config.locale) || document.documentElement.lang || 'en'\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t (lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (options && typeof options.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(lookupKey, options.count)}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error('i18n: cannot replace placeholders in string if no option data provided')\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      } else {\n        return translationString\n      }\n    } else {\n      // If the key wasn't found in our translations object,\n      // return the lookup key itself as the fallback\n      return lookupKey\n    }\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders (translationString, options) {\n    /** @type {Intl.NumberFormat | undefined} */\n    let formatter\n\n    if (this.hasIntlNumberFormatSupport()) {\n      formatter = new Intl.NumberFormat(this.locale)\n    }\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (placeholderValue === false || (\n            typeof placeholderValue !== 'number' &&\n            typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter ? formatter.format(placeholderValue) : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        } else {\n          throw new Error(`i18n: no data found to replace ${placeholderWithBraces} placeholder in string`)\n        }\n      })\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.PluralRules.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports PluralRules (NOT true in IE11)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport () {\n    return Boolean(window.Intl && ('PluralRules' in window.Intl && Intl.PluralRules.supportedLocalesOf(this.locale).length))\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.NumberFormat.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports NumberFormat (also true in IE11)\n   * - The browser/OS has number formatting rules for the current locale (browser dependent)\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlNumberFormatSupport () {\n    return Boolean(window.Intl && ('NumberFormat' in window.Intl && Intl.NumberFormat.supportedLocalesOf(this.locale).length))\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix (lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) { return 'other' }\n\n    let preferredForm\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    if (this.hasIntlPluralRulesSupport()) {\n      preferredForm = new Intl.PluralRules(this.locale).select(count)\n    } else {\n      preferredForm = this.selectPluralFormUsingFallbackRules(count)\n    }\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      if (console && 'warn' in console) {\n        console.warn(`i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`)\n      }\n\n      return 'other'\n      // If the required `other` plural form is missing, all we can do is error\n    } else {\n      throw new Error(\n        `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n      )\n    }\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules (count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale () {\n    const locale = this.locale\n    const localeShort = locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      if (Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)) {\n        const languages = I18n.pluralRulesMap[pluralRule]\n        for (let i = 0; i < languages.length; i++) {\n          if (languages[i] === locale || languages[i] === localeShort) {\n            return pluralRule\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af', 'sq', 'az', 'eu', 'bg', 'ca', 'da', 'nl', 'en', 'et', 'fi', 'ka',\n      'de', 'el', 'hu', 'lb', 'no', 'so', 'sw', 'sv', 'ta', 'te', 'tr', 'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    /* eslint-disable jsdoc/require-jsdoc */\n    arabic (n) {\n      if (n === 0) { return 'zero' }\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n % 100 >= 3 && n % 100 <= 10) { return 'few' }\n      if (n % 100 >= 11 && n % 100 <= 99) { return 'many' }\n      return 'other'\n    },\n    chinese () {\n      return 'other'\n    },\n    french (n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german (n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish (n) {\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n >= 3 && n <= 6) { return 'few' }\n      if (n >= 7 && n <= 10) { return 'many' }\n      return 'other'\n    },\n    russian (n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) { return 'one' }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) { return 'few' }\n      if (last === 0 || (last >= 5 && last <= 9) || (lastTwo >= 11 && lastTwo <= 14)) { return 'many' }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish (n) {\n      if (n === 1 || n === 11) { return 'one' }\n      if (n === 2 || n === 12) { return 'two' }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) { return 'few' }\n      return 'other'\n    },\n    spanish (n) {\n      if (n === 1) { return 'one' }\n      if (n % 1000000 === 0 && n !== 0) { return 'many' }\n      return 'other'\n    },\n    welsh (n) {\n      if (n === 0) { return 'zero' }\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n === 3) { return 'few' }\n      if (n === 6) { return 'many' }\n      return 'other'\n    }\n    /* eslint-enable jsdoc/require-jsdoc */\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit This Page component\n */\nexport class ExitThisPage {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLElement)) {\n      return this\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector('.govuk-js-exit-this-page-skiplink')\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan () {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler () {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener('click', this.handleClick.bind(this))\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator () {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator () {\n    // Show or hide the indicator container depending on keypressCounter value\n    if (this.keypressCounter > 0) {\n      this.$indicatorContainer.classList.add('govuk-exit-this-page__indicator--visible')\n    } else {\n      this.$indicatorContainer.classList.remove('govuk-exit-this-page__indicator--visible')\n    }\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage () {\n    this.$updateSpan.innerText = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.innerText = this.i18n.t('activated')\n\n    window.location.href = this.$button.getAttribute('href')\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick (event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress (event) {\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (\n      (event.key === 'Shift' || event.keyCode === 16 || event.which === 16) &&\n      !this.lastKeyWasModified\n    ) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId !== null) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId !== null) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.innerText = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.innerText = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId !== null) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer () {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    window.clearTimeout(this.keypressTimeoutId)\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer () {\n    window.clearTimeout(this.keypressTimeoutId)\n    this.keypressTimeoutId = null\n\n    this.keypressCounter = 0\n    this.$updateSpan.innerText = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      this.$updateSpan.innerText = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @deprecated Will be made private in v5.0\n   */\n  resetPage () {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.innerText = ''\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @default\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n"],"names":["mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","extractConfigByNamespace","namespace","Error","newObject","keyParts","split","shift","newKey","join","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","I18n","constructor","translations","config","locale","document","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","ExitThisPage","$module","i18n","$button","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","HTMLElement","body","classList","contains","querySelector","defaults","HTMLAnchorElement","buildIndicator","initUpdateSpan","initButtonClickHandler","addEventListener","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","createElement","setAttribute","className","appendChild","handleClick","$indicator","updateIndicator","add","remove","$indicators","querySelectorAll","forEach","index","toggle","exitPage","innerText","location","href","getAttribute","event","preventDefault","keyCode","which","clearTimeout","setKeypressTimer","resetKeypressTimer","shiftKey","setTimeout","freeze","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime"],"mappings":"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"}