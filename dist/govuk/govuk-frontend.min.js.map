{"version":3,"file":"govuk-frontend.min.js","sources":["../../src/govuk/common/govuk-frontend-version.mjs","../../src/govuk/common/index.mjs","../../src/govuk/common/normalise-dataset.mjs","../../src/govuk/i18n.mjs","../../src/govuk/components/accordion/accordion.mjs","../../src/govuk/components/button/button.mjs","../../src/govuk/common/closest-attribute-value.mjs","../../src/govuk/components/character-count/character-count.mjs","../../src/govuk/components/checkboxes/checkboxes.mjs","../../src/govuk/components/error-summary/error-summary.mjs","../../src/govuk/components/exit-this-page/exit-this-page.mjs","../../src/govuk/components/header/header.mjs","../../src/govuk/components/notification-banner/notification-banner.mjs","../../src/govuk/components/radios/radios.mjs","../../src/govuk/components/skip-link/skip-link.mjs","../../src/govuk/components/tabs/tabs.mjs","../../src/govuk/all.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n *\n * @module common/index\n */\n\n/**\n * Config flattening function\n *\n * Takes any number of objects, flattens them into namespaced key-value pairs,\n * (e.g. \\{'i18n.showSection': 'Show section'\\}) and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @private\n * @returns {{ [key: string]: unknown }} A flattened object of key-value pairs.\n */\nexport function mergeConfigs (/* configObject1, configObject2, ...configObjects */) {\n  /**\n   * Function to take nested objects and flatten them to a dot-separated keyed\n   * object. Doing this means we don't need to do any deep/recursive merging of\n   * each of our objects, nor transform our dataset from a flat list into a\n   * nested object.\n   *\n   * @param {{ [key: string]: unknown }} configObject - Deeply nested object\n   * @returns {{ [key: string]: unknown }} Flattened object with dot-separated keys\n   */\n  const flattenObject = function (configObject) {\n    // Prepare an empty return object\n    /** @type {{ [key: string]: unknown }} */\n    const flattenedObject = {}\n\n    /**\n     * Our flattening function, this is called recursively for each level of\n     * depth in the object. At each level we prepend the previous level names to\n     * the key using `prefix`.\n     *\n     * @param {Partial<{ [key: string]: unknown }>} obj - Object to flatten\n     * @param {string} [prefix] - Optional dot-separated prefix\n     */\n    const flattenLoop = function (obj, prefix) {\n      // Loop through keys...\n      for (const key in obj) {\n        // Check to see if this is a prototypical key/value,\n        // if it is, skip it.\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n          continue\n        }\n        const value = obj[key]\n        const prefixedKey = prefix ? `${prefix}.${key}` : key\n        if (typeof value === 'object') {\n          // If the value is a nested object, recurse over that too\n          flattenLoop(value, prefixedKey)\n        } else {\n          // Otherwise, add this value to our return object\n          flattenedObject[prefixedKey] = value\n        }\n      }\n    }\n\n    // Kick off the recursive loop\n    flattenLoop(configObject)\n    return flattenedObject\n  }\n\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the remaining passed objects and push their keys\n  // one-by-one into configObject. Any duplicate keys will override the existing\n  // key with the new value.\n  for (let i = 0; i < arguments.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- Ignore mismatch between arguments types\n    const obj = flattenObject(arguments[i])\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        formattedConfigObject[key] = obj[key]\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from a flattened config\n * object, removing the namespace in the process.\n *\n * @private\n * @param {{ [key: string]: unknown }} configObject - The object to extract key-value pairs from.\n * @param {string} namespace - The namespace to filter keys with.\n * @returns {{ [key: string]: unknown }} Flattened object with dot-separated key namespace removed\n * @throws {Error} Config object required\n * @throws {Error} Namespace string required\n */\nexport function extractConfigByNamespace (configObject, namespace) {\n  // Check we have what we need\n  if (!configObject || typeof configObject !== 'object') {\n    throw new Error('Provide a `configObject` of type \"object\".')\n  }\n\n  if (!namespace || typeof namespace !== 'string') {\n    throw new Error('Provide a `namespace` of type \"string\" to filter the `configObject` by.')\n  }\n\n  /** @type {{ [key: string]: unknown }} */\n  const newObject = {}\n\n  for (const key in configObject) {\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n    // Check if the first namespace matches the configured namespace\n    if (Object.prototype.hasOwnProperty.call(configObject, key) && keyParts[0] === namespace) {\n      // Remove the first item (the namespace) from the parts array,\n      // but only if there is more than one part (we don't want blank keys!)\n      if (keyParts.length > 1) {\n        keyParts.shift()\n      }\n      // Join the remaining parts back together\n      const newKey = keyParts.join('.')\n      // Add them to our new object\n      newObject[newKey] = configObject[key]\n    }\n  }\n  return newObject\n}\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @private\n * @param {string} value - The value to normalise\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString (value) {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const trimmedValue = value.trim()\n\n  if (trimmedValue === 'true') {\n    return true\n  }\n\n  if (trimmedValue === 'false') {\n    return false\n  }\n\n  // Empty / whitespace-only strings are considered finite so we need to check\n  // the length of the trimmed string as well\n  if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n    return Number(trimmedValue)\n  }\n\n  return value\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using normaliseData function\n *\n * @private\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {{ [key: string]: unknown }} Normalised dataset\n */\nexport function normaliseDataset (dataset) {\n  /** @type {{ [key: string]: unknown }} */\n  const out = {}\n\n  for (const key in dataset) {\n    out[key] = normaliseString(dataset[key])\n  }\n\n  return out\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @private\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @param {{ [key: string]: unknown }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor (translations, config) {\n    // Make list of translations available throughout function\n    this.translations = translations || {}\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = (config && config.locale) || document.documentElement.lang || 'en'\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t (lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (options && typeof options.count === 'number') {\n      // Get the plural suffix\n      lookupKey = `${lookupKey}.${this.getPluralSuffix(lookupKey, options.count)}`\n    }\n\n    // Fetch the translation string for that lookup key\n    const translationString = this.translations[lookupKey]\n\n    if (typeof translationString === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translationString.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error('i18n: cannot replace placeholders in string if no option data provided')\n        }\n\n        return this.replacePlaceholders(translationString, options)\n      } else {\n        return translationString\n      }\n    } else {\n      // If the key wasn't found in our translations object,\n      // return the lookup key itself as the fallback\n      return lookupKey\n    }\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders (translationString, options) {\n    /** @type {Intl.NumberFormat | undefined} */\n    let formatter\n\n    if (this.hasIntlNumberFormatSupport()) {\n      formatter = new Intl.NumberFormat(this.locale)\n    }\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (placeholderValue === false || (\n            typeof placeholderValue !== 'number' &&\n            typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter ? formatter.format(placeholderValue) : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        } else {\n          throw new Error(`i18n: no data found to replace ${placeholderWithBraces} placeholder in string`)\n        }\n      })\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.PluralRules.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports PluralRules (NOT true in IE11)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport () {\n    return Boolean(window.Intl && ('PluralRules' in window.Intl && Intl.PluralRules.supportedLocalesOf(this.locale).length))\n  }\n\n  /**\n   * Check to see if the browser supports Intl and Intl.NumberFormat.\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The browser supports the Intl class (true in IE11)\n   * - The implementation of Intl supports NumberFormat (also true in IE11)\n   * - The browser/OS has number formatting rules for the current locale (browser dependent)\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlNumberFormatSupport () {\n    return Boolean(window.Intl && ('NumberFormat' in window.Intl && Intl.NumberFormat.supportedLocalesOf(this.locale).length))\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix (lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) { return 'other' }\n\n    let preferredForm\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    if (this.hasIntlPluralRulesSupport()) {\n      preferredForm = new Intl.PluralRules(this.locale).select(count)\n    } else {\n      preferredForm = this.selectPluralFormUsingFallbackRules(count)\n    }\n\n    // Use the correct plural form if provided\n    if (`${lookupKey}.${preferredForm}` in this.translations) {\n      return preferredForm\n      // Fall back to `other` if the plural form is missing, but log a warning\n      // to the console\n    } else if (`${lookupKey}.other` in this.translations) {\n      if (console && 'warn' in console) {\n        console.warn(`i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`)\n      }\n\n      return 'other'\n      // If the required `other` plural form is missing, all we can do is error\n    } else {\n      throw new Error(\n        `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n      )\n    }\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules (count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale () {\n    const locale = this.locale\n    const localeShort = locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      if (Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)) {\n        const languages = I18n.pluralRulesMap[pluralRule]\n        for (let i = 0; i < languages.length; i++) {\n          if (languages[i] === locale || languages[i] === localeShort) {\n            return pluralRule\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af', 'sq', 'az', 'eu', 'bg', 'ca', 'da', 'nl', 'en', 'et', 'fi', 'ka',\n      'de', 'el', 'hu', 'lb', 'no', 'so', 'sw', 'sv', 'ta', 'te', 'tr', 'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    /* eslint-disable jsdoc/require-jsdoc */\n    arabic (n) {\n      if (n === 0) { return 'zero' }\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n % 100 >= 3 && n % 100 <= 10) { return 'few' }\n      if (n % 100 >= 11 && n % 100 <= 99) { return 'many' }\n      return 'other'\n    },\n    chinese () {\n      return 'other'\n    },\n    french (n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german (n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish (n) {\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n >= 3 && n <= 6) { return 'few' }\n      if (n >= 7 && n <= 10) { return 'many' }\n      return 'other'\n    },\n    russian (n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) { return 'one' }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) { return 'few' }\n      if (last === 0 || (last >= 5 && last <= 9) || (lastTwo >= 11 && lastTwo <= 14)) { return 'many' }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish (n) {\n      if (n === 1 || n === 11) { return 'one' }\n      if (n === 2 || n === 12) { return 'two' }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) { return 'few' }\n      return 'other'\n    },\n    spanish (n) {\n      if (n === 1) { return 'one' }\n      if (n % 1000000 === 0 && n !== 0) { return 'many' }\n      return 'other'\n    },\n    welsh (n) {\n      if (n === 0) { return 'zero' }\n      if (n === 1) { return 'one' }\n      if (n === 2) { return 'two' }\n      if (n === 3) { return 'few' }\n      if (n === 6) { return 'many' }\n      return 'other'\n    }\n    /* eslint-enable jsdoc/require-jsdoc */\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n */\nexport class Accordion {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {AccordionConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /** @private */\n  browserSupportsSessionStorage = false\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element} $module - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Accordion.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n\n    const $sections = this.$module.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      return this\n    }\n\n    this.$sections = $sections\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage()\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls () {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$module.insertBefore($accordionControls, this.$module.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () => this.onShowOrHideAllToggle())\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) => this.onBeforeMatch(event))\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders () {\n    // Loop through sections\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        return\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections to\n      // open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup ($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$span || !$heading) {\n      return\n    }\n\n    // Create a button element that will replace the '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute('aria-controls', `${this.$module.id}-content-${index + 1}`)\n\n    // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\n    for (let i = 0; i < $span.attributes.length; i++) {\n      const attr = $span.attributes.item(i)\n      // Add all attributes but not ID as this is being added to\n      // the section heading ($headingText)\n      if (attr.nodeName !== 'id') {\n        $button.setAttribute(attr.nodeName, attr.nodeValue)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by `aria-labelledby` on the\n    // hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    $headingTextFocus.innerHTML = $span.innerHTML\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading\n    // For the snippet to work with JavaScript, it must be added before adding the page element to the\n    // page's DOM. See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary) {\n      // Create a new `span` element and copy the summary line content from the original `div` to the\n      // new `span`\n      // This is because the summary line text is now inside a button element, which can only contain\n      // phrasing content\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (let j = 0, l = $summary.attributes.length; j < l; ++j) {\n        const nodeName = $summary.attributes.item(j).nodeName\n        const nodeValue = $summary.attributes.item(j).nodeValue\n        $summarySpan.setAttribute(nodeName, nodeValue)\n      }\n\n      // Copy original contents of summary to the new summary span\n      $summarySpanFocus.innerHTML = $summary.innerHTML\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.parentNode.replaceChild($summarySpan, $summary)\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch (event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle ($section) {\n    const expanded = this.isExpanded($section)\n    this.setExpanded(!expanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle () {\n    const nowExpanded = !this.checkIfAllSectionsOpen()\n\n    // Loop through sections\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      // Store the state in sessionStorage when a change is triggered\n      this.storeState($section)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded (expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(`.${this.sectionShowHideTextClass}`)\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$showHideIcon ||\n      !($showHideText instanceof HTMLElement) ||\n      !$button ||\n      !$content) {\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.innerText = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(`.${this.sectionHeadingTextClass}`)\n    if ($headingText instanceof HTMLElement) {\n      ariaLabelParts.push($headingText.innerText.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary instanceof HTMLElement) {\n      ariaLabelParts.push($summary.innerText.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded ($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  checkIfAllSectionsOpen () {\n    // Get a count of all the Accordion sections\n    const sectionsCount = this.$sections.length\n    // Get a count of all Accordion sections that are expanded\n    const expandedSectionCount = this.$module.querySelectorAll(`.${this.sectionExpandedClass}`).length\n    const areAllSectionsOpen = sectionsCount === expandedSectionCount\n\n    return areAllSectionsOpen\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton (expanded) {\n    const newButtonText = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.innerText = newButtonText\n\n    // Swap icon, toggle class\n    if (expanded) {\n      this.$showAllIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      this.$showAllIcon.classList.add(this.downChevronIconClass)\n    }\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  storeState ($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      // We need a unique way of identifying each content in the Accordion. Since\n      // an `#id` should be unique and an `id` is required for `aria-` attributes\n      // `id` can be safely used.\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = $button.getAttribute('aria-expanded')\n\n        // Only set the state when both `contentId` and `contentState` are taken from the DOM.\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState)\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState ($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = contentId ? window.sessionStorage.getItem(contentId) : null\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section)\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by dividing its contents\n   * into thematic chunks.\n   * See https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl () {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add('govuk-visually-hidden', this.sectionHeadingDividerClass)\n    $punctuationEl.innerHTML = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @default\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n}\n\nconst helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    const testString = 'this is the test string'\n    let result\n    try {\n      window.sessionStorage.setItem(testString, testString)\n      result = window.sessionStorage.getItem(testString) === testString.toString()\n      window.sessionStorage.removeItem(testString)\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\n\nconst KEY_SPACE = 32\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n */\nexport class Button {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ButtonConfig}\n   */\n  config\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   *\n   * @param {Element} $module - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Button.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.$module.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$module.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can activate things with the 'button'\n   * role, so we need to match the functionality of native HTML buttons\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown (event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.keyCode !== KEY_SPACE) {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if ($target instanceof HTMLElement && $target.getAttribute('role') === 'button') {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen. This\n   * stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce (event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @default\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n","/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @private\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue ($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { extractConfigByNamespace, mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n */\nexport class CharacterCount {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $visibleCountMessage = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $screenReaderCountMessage = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength = Infinity\n\n  /**\n   * @param {Element} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      return this\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset($module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change the\n    // type of count, we need to reset the `maxlength` and `maxwords` from the\n    // JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config || {},\n      configOverrides,\n      datasetConfig\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    if ('maxwords' in this.config && this.config.maxwords) {\n      this.maxLength = this.config.maxwords\n    } else if ('maxlength' in this.config && this.config.maxlength) {\n      this.maxLength = this.config.maxlength\n    } else {\n      return this\n    }\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const $textareaDescription = document.getElementById(`${this.$textarea.id}-info`)\n    if (!$textareaDescription) {\n      return\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if ($textareaDescription.innerText.match(/^\\s*$/)) {\n      $textareaDescription.innerText = this.i18n.t('textareaDescription', { count: this.maxLength })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className = 'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $screenReaderCountMessage)\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents () {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp () {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\n   * the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus () {\n    this.valueChecker = window.setInterval(() => {\n      if (!this.lastInputTimestamp || (Date.now() - 500) >= this.lastInputTimestamp) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur () {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged () {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage () {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage () {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      this.$visibleCountMessage.classList.remove('govuk-character-count__message--disabled')\n    } else {\n      this.$visibleCountMessage.classList.add('govuk-character-count__message--disabled')\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      this.$textarea.classList.add('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-hint')\n      this.$visibleCountMessage.classList.add('govuk-error-message')\n    } else {\n      this.$textarea.classList.remove('govuk-textarea--error')\n      this.$visibleCountMessage.classList.remove('govuk-error-message')\n      this.$visibleCountMessage.classList.add('govuk-hint')\n    }\n\n    // Update message\n    this.$visibleCountMessage.innerText = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage () {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.innerText = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count (text) {\n    if ('maxwords' in this.config && this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    } else {\n      return text.length\n    }\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage () {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    const countType = 'maxwords' in this.config && this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage (remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix = remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, { count: Math.abs(remainingNumber) })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold () {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = maxLength * this.config.threshold / 100\n\n    return (thresholdValue <= currentLength)\n  }\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @default\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {CharacterCountConfigWithMaxLength | CharacterCountConfigWithMaxWords} CharacterCountConfig\n */\n\n/**\n * Character count config (with maximum number of characters)\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfigWithMaxLength\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count config (with maximum number of words)\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfigWithMaxWords\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n","/**\n * Checkboxes component\n */\nexport class Checkboxes {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block â€“\n   * for example, a checkbox for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the checkbox state.\n   *\n   * @param {Element} $module - HTML element to use for checkboxes\n   */\n  constructor ($module) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      return this\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip checkboxes without data-aria-controls attributes, or where the\n      // target element does not exist.\n      if (!targetId || !document.getElementById(targetId)) {\n        return\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals () {\n    this.$inputs.forEach(($input) => this.syncConditionalRevealWithInputState($input))\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState ($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target && $target.classList.contains('govuk-checkboxes__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked)\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept ($input) {\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = ($input.form === $inputWithSameName.form)\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs ($input) {\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const allInputsWithSameNameAndExclusiveBehaviour = document.querySelectorAll(\n      `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = ($input.form === $exclusiveInput.form)\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a checkbox, sync\n   * the state of any associated conditional reveal with the checkbox state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick (event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (!($clickedInput instanceof HTMLInputElement) || $clickedInput.type !== 'checkbox') {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive = ($clickedInput.getAttribute('data-behaviour') === 'exclusive')\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n}\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in configuration.\n */\nexport class ErrorSummary {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ErrorSummaryConfig}\n   */\n  config\n\n  /**\n   *\n   * @param {Element} $module - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor ($module, config) {\n    // Some consuming code may not be passing a module,\n    // for example if they initialise the component\n    // on their own by directly passing the result\n    // of `document.querySelector`.\n    // To avoid breaking further JavaScript initialisation\n    // we need to safeguard against this so things keep\n    // working the same now we read the elements data attributes\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      ErrorSummary.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.setFocus()\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Focus the error summary\n   *\n   * @private\n   */\n  setFocus () {\n    if (this.config.disableAutoFocus) {\n      return\n    }\n\n    // Set tabindex to -1 to make the element programmatically focusable, but\n    // remove it on blur as the error summary doesn't need to be focused again.\n    this.$module.setAttribute('tabindex', '-1')\n\n    this.$module.addEventListener('blur', () => {\n      this.$module.removeAttribute('tabindex')\n    })\n\n    this.$module.focus()\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick (event) {\n    const $target = event.target\n    if (this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is announced\n   * (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget ($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = this.getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get fragment from URL\n   *\n   * Extract the fragment (everything after the hash) from a URL, but not including\n   * the hash.\n   *\n   * @private\n   * @param {string} url - URL\n   * @returns {string | undefined} Fragment from URL, without the hash\n   */\n  getFragmentFromUrl (url) {\n    if (url.indexOf('#') === -1) {\n      return undefined\n    }\n\n    return url.split('#').pop()\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no associated\n   *   legend or label can be found\n   */\n  getAssociatedLegendOrLabel ($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n        if ($input instanceof HTMLInputElement && ($input.type === 'checkbox' || $input.type === 'radio')) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return document.querySelector(`label[for='${$input.getAttribute('id')}']`) ||\n      $input.closest('label')\n  }\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @default\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n","import { mergeConfigs, extractConfigByNamespace } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit This Page component\n */\nexport class ExitThisPage {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLElement)) {\n      return this\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'))\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector('.govuk-js-exit-this-page-skiplink')\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan () {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler () {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener('click', this.handleClick.bind(this))\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator () {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator () {\n    // Show or hide the indicator container depending on keypressCounter value\n    if (this.keypressCounter > 0) {\n      this.$indicatorContainer.classList.add('govuk-exit-this-page__indicator--visible')\n    } else {\n      this.$indicatorContainer.classList.remove('govuk-exit-this-page__indicator--visible')\n    }\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage () {\n    this.$updateSpan.innerText = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.innerText = this.i18n.t('activated')\n\n    window.location.href = this.$button.getAttribute('href')\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick (event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress (event) {\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (\n      (event.key === 'Shift' || event.keyCode === 16 || event.which === 16) &&\n      !this.lastKeyWasModified\n    ) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId !== null) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId !== null) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.innerText = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.innerText = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId !== null) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer () {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    window.clearTimeout(this.keypressTimeoutId)\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer () {\n    window.clearTimeout(this.keypressTimeoutId)\n    this.keypressTimeoutId = null\n\n    this.keypressCounter = 0\n    this.$updateSpan.innerText = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      this.$updateSpan.innerText = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @deprecated Will be made private in v5.0\n   */\n  resetPage () {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.innerText = ''\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @default\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n","/**\n * Header component\n */\nexport class Header {\n  /** @private */\n  $module\n\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to\n   * big and back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to\n   * detect when a screen size change happens. We rely on it being null if the\n   * feature isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the browser\n   * viewport moves between states.\n   *\n   * @param {Element} $module - HTML element to use for header\n   */\n  constructor ($module) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n    this.$menuButton = $module.querySelector('.govuk-js-header-toggle')\n    this.$menu = this.$menuButton && $module.querySelector(\n      `#${this.$menuButton.getAttribute('aria-controls')}`\n    )\n\n    if (\n      !(\n        this.$menuButton instanceof HTMLElement ||\n        this.$menu instanceof HTMLElement\n      )\n    ) {\n      return this\n    }\n\n    // Set the matchMedia to the govuk-frontend desktop breakpoint\n    this.mql = window.matchMedia('(min-width: 48.0625em)')\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.syncState())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.syncState())\n    }\n\n    this.syncState()\n    this.$menuButton.addEventListener('click', () => this.handleMenuButtonClick())\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  syncState () {\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick () {\n    this.menuIsOpen = !this.menuIsOpen\n    this.syncState()\n  }\n}\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\n\n/**\n * Notification Banner component\n */\nexport class NotificationBanner {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor ($module, config) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config || {},\n      normaliseDataset($module.dataset)\n    )\n\n    this.setFocus()\n  }\n\n  /**\n   * Focus the element\n   *\n   * If `role=\"alert\"` is set, focus the element to help some assistive technologies\n   * prioritise announcing it.\n   *\n   * You can turn off the auto-focus functionality by setting `data-disable-auto-focus=\"true\"` in the\n   * component HTML. You might wish to do this based on user research findings, or to avoid a clash\n   * with another element which should be focused when the page loads.\n   *\n   * @private\n   */\n  setFocus () {\n    if (this.config.disableAutoFocus) {\n      return\n    }\n\n    if (this.$module.getAttribute('role') !== 'alert') {\n      return\n    }\n\n    // Set tabindex to -1 to make the element focusable with JavaScript.\n    // Remove the tabindex on blur as the component doesn't need to be focusable after the page has\n    // loaded.\n    if (!this.$module.getAttribute('tabindex')) {\n      this.$module.setAttribute('tabindex', '-1')\n\n      this.$module.addEventListener('blur', () => {\n        this.$module.removeAttribute('tabindex')\n      })\n    }\n\n    this.$module.focus()\n  }\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @default\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n","/**\n * Radios component\n */\nexport class Radios {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block â€“ for\n   * example, a radio for 'Phone' could reveal an additional form field for the\n   * user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the radio state.\n   *\n   * @param {Element} $module - HTML element to use for radios\n   */\n  constructor ($module) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $inputs = $module.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      return this\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes, or where the\n      // target element does not exist.\n      if (!targetId || !document.getElementById(targetId)) {\n        return\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals () {\n    this.$inputs.forEach(($input) => this.syncConditionalRevealWithInputState($input))\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState ($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target && $target.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle('govuk-radios__conditional--hidden', !inputIsChecked)\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a radio\n   * in another $module)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick (event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (!($clickedInput instanceof HTMLInputElement) || $clickedInput.type !== 'radio') {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    /** @satisfies {NodeListOf<HTMLInputElement>} */\n    const $allInputs = document.querySelectorAll('input[type=\"radio\"][aria-controls]')\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n}\n","/**\n * Skip link component\n */\nexport class SkipLink {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $linkedElement = null\n\n  /** @private */\n  linkedElementListener = false\n\n  /**\n   *\n   * @param {Element} $module - HTML element to use for skip link\n   */\n  constructor ($module) {\n    if (!($module instanceof HTMLAnchorElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    this.$module = $module\n\n    // Check for linked element\n    const $linkedElement = this.getLinkedElement()\n    if (!$linkedElement) {\n      return\n    }\n\n    this.$linkedElement = $linkedElement\n    this.$module.addEventListener('click', () => this.focusLinkedElement())\n  }\n\n  /**\n   * Get linked element\n   *\n   * @private\n   * @returns {HTMLElement | null} $linkedElement - DOM element linked to from the skip link\n   */\n  getLinkedElement () {\n    const linkedElementId = this.getFragmentFromUrl()\n    if (!linkedElementId) {\n      return null\n    }\n\n    return document.getElementById(linkedElementId)\n  }\n\n  /**\n   * Focus the linked element\n   *\n   * Set tabindex and helper CSS class. Set listener to remove them on blur.\n   *\n   * @private\n   */\n  focusLinkedElement () {\n    if (!this.$linkedElement.getAttribute('tabindex')) {\n      // Set the element tabindex to -1 so it can be focused with JavaScript.\n      this.$linkedElement.setAttribute('tabindex', '-1')\n      this.$linkedElement.classList.add('govuk-skip-link-focused-element')\n\n      // Add listener for blur on the focused element (unless the listener has previously been added)\n      if (!this.linkedElementListener) {\n        this.$linkedElement.addEventListener('blur', () => this.removeFocusProperties())\n        this.linkedElementListener = true\n      }\n    }\n\n    this.$linkedElement.focus()\n  }\n\n  /**\n   * Remove the tabindex that makes the linked element focusable because the element only needs to be\n   * focusable until it has received programmatic focus and a screen reader has announced it.\n   *\n   * Remove the CSS class that removes the native focus styles.\n   *\n   * @private\n   */\n  removeFocusProperties () {\n    this.$linkedElement.removeAttribute('tabindex')\n    this.$linkedElement.classList.remove('govuk-skip-link-focused-element')\n  }\n\n  /**\n   * Get fragment from URL\n   *\n   * Extract the fragment (everything after the hash symbol) from a URL, but not including\n   * the symbol.\n   *\n   * @private\n   * @returns {string | undefined} Fragment from URL, without the hash symbol\n   */\n  getFragmentFromUrl () {\n    // Bail if the anchor link doesn't have a hash\n    if (!this.$module.hash) {\n      return\n    }\n\n    return this.$module.hash.split('#').pop()\n  }\n}\n","/**\n * Tabs component\n */\nexport class Tabs {\n  /** @private */\n  $module\n\n  /** @private */\n  $tabs\n\n  /** @private */\n  keys = { left: 37, right: 39, up: 38, down: 40 }\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element} $module - HTML element to use for tabs\n   */\n  constructor ($module) {\n    if (!($module instanceof HTMLElement) || !document.body.classList.contains('govuk-frontend-supported')) {\n      return this\n    }\n\n    /** @satisfies {NodeListOf<HTMLAnchorElement>} */\n    const $tabs = $module.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      return this\n    }\n\n    this.$module = $module\n    this.$tabs = $tabs\n\n    // Save bounded functions to use when removing event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks () {\n    this.mql = window.matchMedia('(min-width: 40.0625em)')\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode () {\n    if (this.mql.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup () {\n    const $tabList = this.$module.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$module.querySelectorAll('.govuk-tabs__list-item')\n\n    if (!this.$tabs || !$tabList || !$tabListItems) {\n      return\n    }\n\n    $tabList.setAttribute('role', 'tablist')\n\n    $tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) || this.$tabs[0]\n    if (!$activeTab) {\n      return\n    }\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown () {\n    const $tabList = this.$module.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$module.querySelectorAll('a.govuk-tabs__list-item')\n\n    if (!this.$tabs || !$tabList || !$tabListItems) {\n      return\n    }\n\n    $tabList.removeAttribute('role')\n\n    $tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange () {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab ($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab ($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab (hash) {\n    return this.$module.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes ($tab) {\n    // set tab attributes\n    const panelId = this.getHref($tab).slice(1)\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes ($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick (event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry ($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = this.getHref($tab).slice(1)\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown (event) {\n    switch (event.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab () {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab || !$currentTab.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    /** @satisfies {HTMLAnchorElement} */\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab () {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab || !$currentTab.parentElement) {\n      return\n    }\n\n    const $previousTabListItem = $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    /** @satisfies {HTMLAnchorElement} */\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel ($tab) {\n    return this.$module.querySelector(this.getHref($tab))\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel ($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel ($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab ($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab ($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab () {\n    return this.$module.querySelector('.govuk-tabs__list-item--selected a.govuk-tabs__tab')\n  }\n\n  /**\n   * Get link hash fragment for href attribute\n   *\n   * this is because IE doesn't always return the actual value but a relative full path\n   * should be a utility function most prob\n   * {@link http://labs.thesedays.com/blog/2010/01/08/getting-the-href-value-with-jquery-in-ie/}\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {string} Hash fragment including #\n   */\n  getHref ($tab) {\n    const href = $tab.getAttribute('href')\n    const hash = href.slice(href.indexOf('#'), href.length)\n    return hash\n  }\n}\n","/* eslint-disable no-new */\n\nimport { version } from './common/govuk-frontend-version.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config} [config] - Config for all components\n */\nfunction initAll (config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!document.body.classList.contains('govuk-frontend-supported')) {\n    return\n  }\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  const $scope = config.scope instanceof HTMLElement ? config.scope : document\n\n  const $accordions = $scope.querySelectorAll('[data-module=\"govuk-accordion\"]')\n  $accordions.forEach(($accordion) => {\n    new Accordion($accordion, config.accordion)\n  })\n\n  const $buttons = $scope.querySelectorAll('[data-module=\"govuk-button\"]')\n  $buttons.forEach(($button) => {\n    new Button($button, config.button)\n  })\n\n  const $characterCounts = $scope.querySelectorAll('[data-module=\"govuk-character-count\"]')\n  $characterCounts.forEach(($characterCount) => {\n    new CharacterCount($characterCount, config.characterCount)\n  })\n\n  const $checkboxes = $scope.querySelectorAll('[data-module=\"govuk-checkboxes\"]')\n  $checkboxes.forEach(($checkbox) => {\n    new Checkboxes($checkbox)\n  })\n\n  // Find first error summary module to enhance.\n  const $errorSummary = $scope.querySelector('[data-module=\"govuk-error-summary\"]')\n  if ($errorSummary) {\n    new ErrorSummary($errorSummary, config.errorSummary)\n  }\n\n  const $exitThisPageButtons = $scope.querySelectorAll('[data-module=\"govuk-exit-this-page\"]')\n  $exitThisPageButtons.forEach(($button) => {\n    new ExitThisPage($button, config.exitThisPage)\n  })\n\n  // Find first header module to enhance.\n  const $header = $scope.querySelector('[data-module=\"govuk-header\"]')\n  if ($header) {\n    new Header($header)\n  }\n\n  const $notificationBanners = $scope.querySelectorAll('[data-module=\"govuk-notification-banner\"]')\n  $notificationBanners.forEach(($notificationBanner) => {\n    new NotificationBanner($notificationBanner, config.notificationBanner)\n  })\n\n  const $radios = $scope.querySelectorAll('[data-module=\"govuk-radios\"]')\n  $radios.forEach(($radio) => {\n    new Radios($radio)\n  })\n\n  // Find first skip link module to enhance.\n  const $skipLink = $scope.querySelector('[data-module=\"govuk-skip-link\"]')\n  if ($skipLink) {\n    new SkipLink($skipLink)\n  }\n\n  const $tabs = $scope.querySelectorAll('[data-module=\"govuk-tabs\"]')\n  $tabs.forEach(($tabs) => {\n    new Tabs($tabs)\n  })\n}\n\nexport {\n  initAll,\n  version,\n\n  // Components\n  Accordion,\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  ExitThisPage,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n}\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {Element} [scope=document] - Scope to query for components\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Config for individual components\n *\n * @typedef {import('./components/accordion/accordion.mjs').AccordionConfig} AccordionConfig\n * @typedef {import('./components/accordion/accordion.mjs').AccordionTranslations} AccordionTranslations\n * @typedef {import('./components/button/button.mjs').ButtonConfig} ButtonConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfig} CharacterCountConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfigWithMaxLength} CharacterCountConfigWithMaxLength\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfigWithMaxWords} CharacterCountConfigWithMaxWords\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountTranslations} CharacterCountTranslations\n * @typedef {import('./components/error-summary/error-summary.mjs').ErrorSummaryConfig} ErrorSummaryConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageConfig} ExitThisPageConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageTranslations} ExitThisPageTranslations\n * @typedef {import('./components/notification-banner/notification-banner.mjs').NotificationBannerConfig} NotificationBannerConfig\n */\n"],"names":["version","mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","prototype","hasOwnProperty","call","value","prefixedKey","formattedConfigObject","i","arguments","length","extractConfigByNamespace","namespace","Error","newObject","keyParts","split","shift","join","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","I18n","constructor","translations","config","this","locale","document","documentElement","lang","t","lookupKey","options","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","Accordion","$module","i18n","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","browserSupportsSessionStorage","$showAllButton","$showAllIcon","$showAllText","HTMLElement","body","classList","contains","defaults","querySelectorAll","helper","checkForSessionStorage","initControls","initSectionHeaders","areAllSectionsOpen","checkIfAllSectionsOpen","updateShowAllButton","createElement","setAttribute","add","appendChild","$accordionControls","insertBefore","firstChild","addEventListener","onShowOrHideAllToggle","event","onBeforeMatch","forEach","$section","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","index","$span","$heading","$summary","$button","id","attributes","attr","item","nodeName","nodeValue","$headingText","$headingTextFocus","innerHTML","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","$summarySpan","$summarySpanFocus","j","l","parentNode","replaceChild","removeChild","$fragment","target","Element","closest","expanded","storeState","nowExpanded","$content","newButtonText","innerText","ariaLabelParts","push","ariaLabelMessage","removeAttribute","remove","toString","rememberExpanded","contentId","getAttribute","contentState","sessionStorage","setItem","getItem","$punctuationEl","freeze","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","testString","result","removeItem","exception","Button","debounceFormSubmitTimer","handleKeyDown","debounce","$target","keyCode","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","closestAttributeValue","$element","attributeName","$closestElementWithAttribute","CharacterCount","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","maxLength","Infinity","HTMLTextAreaElement","HTMLInputElement","datasetConfig","configOverrides","maxlength","undefined","maxwords","$textareaDescription","getElementById","insertAdjacentElement","className","bindChangeEvents","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","getCountMessage","text","countType","formatCountMessage","translationKeySuffix","threshold","currentLength","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","Checkboxes","$inputs","$input","targetId","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","inputIsChecked","checked","toggle","unCheckAllInputsExcept","name","$inputWithSameName","form","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","type","ErrorSummary","setFocus","disableAutoFocus","focus","focusTarget","HTMLAnchorElement","inputId","getFragmentFromUrl","href","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","url","indexOf","pop","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","ExitThisPage","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","buildIndicator","initUpdateSpan","initButtonClickHandler","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","$indicator","updateIndicator","exitPage","location","which","resetKeypressTimer","clearTimeout","setKeypressTimer","shiftKey","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime","Header","$menuButton","$menu","menuIsOpen","mql","matchMedia","syncState","addListener","handleMenuButtonClick","matches","NotificationBanner","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","SkipLink","$linkedElement","linkedElementListener","getLinkedElement","focusLinkedElement","linkedElementId","removeFocusProperties","hash","Tabs","$tabs","keys","left","right","up","down","jsHiddenClass","changingHash","boundTabClick","boundTabKeydown","boundOnHashChange","onTabClick","onTabKeydown","onHashChange","setupResponsiveChecks","checkMode","setup","teardown","$tabList","$tabListItems","$item","$tab","setAttributes","hideTab","$activeTab","getTab","showTab","removeEventListener","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","getHref","slice","$panel","getPanel","$currentTab","$nextTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","parentElement","$nextTabListItem","nextElementSibling","$previousTabListItem","previousElementSibling","initAll","$scope","scope","$accordion","accordion","button","$characterCount","characterCount","$checkbox","$errorSummary","errorSummary","exitThisPage","$notificationBanner","notificationBanner","$radio","$skipLink"],"mappings":"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"}